 
* multiple games; but how do you keep items separate between them?
* maybe use es5 prototypes instead of es6 classes???
* should the garbage collection phase be separate from saving?
* what about fancy features, like images, background images, ui effects, colour animations
* add a means of viewing information about the game without logging in, like what kinds/classes/places/etc exist

* add notifications for activity in the current room, and maybe a way to filter only certain events
* maybe sound effects?

* delete old backups so they don't multiply
* reuse object ids when allocating new objects
* add support for dot names in attributes, so that you can edit 'style.icon', etc
* modify setattr to allow new attributes (not checking editable_by)

* make input autofocus
* further refactor console code? do you want to mix models and components?
* should you move form stuff to lib/, along with server side validation?



* add form generation functions??
* add a way to add data to a form without using a hidden field; just an attribute on the prompt object
* you actually don't need form switcher in theme because the css file can be specified as a default
* make room customize css textarea only accessible to certain wizard users (maybe a distinction between wizard and builder?)
* add a feedback system to prompt, so that it can send back info and get a response that updates the prompt, and you could use this
  to implement a chess type game, where you make a move, and it updates the view with the new positions

* allow setting of background audio; option for looping or not, can be a url or a local uploaded file
* add public flag to uploads
* add image editor (client side?) that allows you to resize, pan, zoom, etc
* add builder permissions, so they can build but not do anything (how will permissions work?)
* allow spaces in commands, using the / notation; a way of specifying a different display name from the function name, rather than both being the first item
  maybe even support for @go type commands
* expanded help system, with see also:, mechanics explaination, etc; should it be on the objects themselves, maybe it a big function, or on a help object?
* you could make verbs into a class, which has the function, the args string, and the help, and it would automatically do the rest



* you need better display of custom messages for things; like 'The door is closed', 'You can't move because you're fighting', 'You're drunk and wander around instead'
* custom messages for attacking, look at lpmud/discworld code

* could you have a response object that gives the fail/success messages for each of the 3 possible cases (1st, 2nd, 3rd person)?  Could you even have this and throw
  it as an error to be caught?
* 4 ways of responding: throw, return, print, or store in a response object (inside args, or as a second argument)



* should you totally proxify the character, so that it's the character that moves, the character that fights, etc
* if you want the character/body verbs to appear next to the player ones, you'll have to proxy the body into the verbs_for and do_verbs_for functions

* how will you convey the image of your body/character/stats to the user?  How can it be expandable/object-specified
* you need a means of templating; you can make json encodable heirachies, or arrays of direct m() calls, or you could send a function as text, unfunctionify it, and
  call it with the data in order to update the code.... that's the most dangerous, but it's also the most versitile
* could you highlight stats that change, like during combat when your hit, your hp flashes red with the new number
* merge decorations/style/views/etc?? refactor somehow



* make data dir selectable through an environment variable?
* you need to deal with the capitals/lower case thing.  Either names must be lowercase, or names should be made lowercase for action log messages

* implement containers
* implement vending machine
* finish implementing follow... how to move the character
* it shouldn't be possible to move if you're sitting down; there should be a function of some kind that evaluates if an object can move, before the move occurs
* invisible flag, or is_visible() function, which is checked when displaying contents of a room; then monsters could die and hide themselves without moving

* remember to make the body shop a normal room again, not a fighting room

* add typing indicator, for chatting? make it easy to talk to someone who walks away
* add means of talking to someone who's moving around
* represent exits visually, by arranging them in the correct directions; maybe even an indicator of which direction you came from last
* add a back command so you can easily go back to where you were, or make it work with back buttons



COMMANDS:
* whisper
* stand? sit? or should you do fully customizable poses?
* follow/unfollow
* favorite location (and have menu at top)
* who
* where


RPG:
* eat/drink
* kill/attack/stop
* wear/hold/weild
* search/traps
* open/close/lock/pick/knock
* steal/sneak/backstab/sneak
* spells/cast
* learn/train/etc
* store, where you list items for sale, and other users can view, buy, offer

* vending machine for items
* a map item that can take you back to where you've been, or could be found... maybe it would only guide you rather than quicklink you (ie. cause the right exits to be highlighted)


PROMPTS:
* edit verb/function
* customize room style
* select/config theme
* configure profile/preferences
* configure character (in the body shop)


AREAS:
* Control Tower floor, with ATC radio
* Penthouse (which is ransacked)
* Private Rooms (hallway or hotel rooms that you can 'rent?')



IDEAS:

    * 'leash' the ducky, which makes it follow you, and also somehow makes it so that in descriptions, it shows you holding the leash... so it makes it
      clear to others (this is just an example for an effect that crosses beings)
    * a harp that you can 'play', which will play a pre-recorded song that you upload to the server
    * Helena mentioned it's cool when games can be beaten without fighting, even rewarded for not fighting
    * what if you could make an alternate means of 'battle' such that you have to play a game, like chess, which could be displayed somehow in a viewbox
      like prompt/details.




    * a MUSH for the modern age... a more visually/intuitively interactive system, easily used on mobile
    * A significant part would still be chat.  You would see a description of the room you're in, a list of people and objects, and a chat window of the current
      content in the room.  You would see the exits in a visual format, with the option to click on them to travel.  Clicking on a person or object would allow you
      to select an interaction

    * urls would signify where you are, and could be passed around for ... some reason
    * possibly audio playing live? (this could be abused of course)
    * music + background image for part of screen, to set the mood of the location
    * customizable css files, which could be stored on the server and downloaded only to the authorized user.  It shouldn't require protections because it's
      all client side.

